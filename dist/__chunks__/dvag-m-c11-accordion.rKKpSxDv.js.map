{"version":3,"file":"dvag-m-c11-accordion.rKKpSxDv.js","sources":["../../src/components/dvag-m-c11-accordion/dvag-m-c11-accordion.ts"],"sourcesContent":["import { Component, MQBasedRendered, uiElements, uiEvent } from \"@kluntje/core\";\nimport { addClass, find, /* getParent, */ hasClass, removeClass, waitFor } from \"@kluntje/js-utils/lib/dom-helpers\";\nimport { throttle } from \"@kluntje/js-utils/lib/function-helpers/decorators\";\nimport mqDefinitions from \"Config/mediaQueries\";\nimport { ACTIVE } from \"Constants/cssClasses\";\n// import AEMPanelcontainerService from \"Services/AEMPanelcontainerService\";\n// import { PanelcontainerMessageData } from \"Services/AEMPanelcontainerService.types\";\n\n@MQBasedRendered(mqDefinitions)\nexport class DvagC11Accordion extends Component {\n  private blockContentMap: WeakMap<HTMLDivElement, HTMLDivElement> = new WeakMap();\n\n  @uiElements(\".dvag-m-c11-accordion__toggle\")\n  toggles: Array<HTMLButtonElement>;\n\n  @uiElements(\".dvag-m-c11-accordion__block\")\n  blocks: Array<HTMLDivElement>;\n\n  @uiElements(\".dvag-m-c11-accordion__content\")\n  contents: Array<HTMLDivElement>;\n\n  afterComponentRender() {\n    this.initBlockContentMap();\n    this.setContentHeight();\n    // this.initEditMode();\n  }\n\n  /**\n   * initializes ContentMap to map blocks and contents\n   */\n  initBlockContentMap() {\n    this.blocks.forEach((block: HTMLDivElement) => {\n      const content = find(block, \".dvag-m-c11-accordion__content\") as HTMLDivElement;\n      if (content !== null) {\n        this.blockContentMap.set(block, content);\n      }\n    });\n  }\n\n  /**\n   * initializes AEMPanelcontainerService to observe messages sent by AEM panelContainer\n   */\n  // initEditMode() {\n  //   AEMPanelcontainerService.observeMessages(\"cmp-accordion\", (data: PanelcontainerMessageData) =>\n  //     this.handlePanelcontainerMessage(data),\n  //   );\n  // }\n\n  /**\n   * triggers click on toggle regarding to AEM panelContainer message data\n   * @param {PanelcontainerMessageData} data\n   */\n  // handlePanelcontainerMessage(data: PanelcontainerMessageData) {\n  //   let panelcontainerId = this.dataset.cmpPanelcontainerId;\n\n  //   if (panelcontainerId === undefined) {\n  //     const parentCarousel = getParent<HTMLElement>(this, \".cmp-accordion\");\n  //     panelcontainerId = parentCarousel?.dataset.cmpPanelcontainerId || undefined;\n  //   }\n\n  //   if (data.id !== panelcontainerId) return;\n\n  //   // @TODO: must be checked if this works after core component is implemented in BE:\n  //   this.toggles[data.index].click();\n  // }\n\n  /**\n   * uses lifecycle-hook to destroy accordion\n   */\n  destroyComponent(): void {\n    this.blockContentMap = new WeakMap();\n  }\n\n  /**\n   * sets content height as basis for css-animation\n   */\n  setContentHeight() {\n    if (this.contents === undefined) return;\n    this.contents.forEach((content: HTMLDivElement) => {\n      this.updateContentHeight(content);\n    });\n  }\n\n  /**\n   * recalculates the contentHeight in case lazy loading content is included (e.g. in C13 Text-Media-component)\n   * @param {HTMLDivElement} contentBlock\n   */\n  updateContentHeight(contentBlock: HTMLDivElement) {\n    // get first child for reading height\n    const contentHeight = contentBlock.firstElementChild !== null ? contentBlock.firstElementChild.scrollHeight : 0;\n    // set custom property\n    contentBlock.style.setProperty(\"--accordion-content-height\", `${contentHeight}px`);\n  }\n\n  /**\n   * updated contentHeight if window resizes\n   */\n  @uiEvent(\"window\", \"resize\")\n  @throttle(100)\n  handleWindowResize() {\n    this.setContentHeight();\n  }\n\n  /**\n   * toggles this block's content visibility of the given toggle button\n   * @param {MouseEvent} e\n   */\n  @uiEvent(\"toggles\", \"click\")\n  async onToggleClick(e: MouseEvent) {\n    e.preventDefault();\n    const block = (e.currentTarget as HTMLElement).parentElement as HTMLDivElement;\n    if (!block) return;\n    const content = this.blockContentMap.get(block);\n    if (!content) return;\n    if (hasClass(block, ACTIVE)) {\n      await waitFor(100);\n      removeClass(block, ACTIVE);\n    } else {\n      await waitFor(100);\n      addClass(block, ACTIVE);\n      await waitFor(300);\n      this.updateContentHeight(content);\n    }\n  }\n}\n\ncustomElements.define(\"dvag-m-c11-accordion\", DvagC11Accordion);\n"],"names":["DvagC11Accordion","Component","block","content","find","contentBlock","contentHeight","hasClass","ACTIVE","waitFor","removeClass","addClass","__decorateClass","uiElements","uiEvent","throttle","MQBasedRendered","mqDefinitions"],"mappings":"sbASa,IAAAA,EAAN,cAA+BC,CAAU,CAAzC,aAAA,CAAA,MAAA,GAAA,SAAA,EACG,KAAA,oBAA+D,OAAQ,CAW/E,sBAAuB,CACrB,KAAK,oBAAoB,EACzB,KAAK,iBAAiB,CAExB,CAKA,qBAAsB,CACf,KAAA,OAAO,QAASC,GAA0B,CACvC,MAAAC,EAAUC,EAAKF,EAAO,gCAAgC,EACxDC,IAAY,MACT,KAAA,gBAAgB,IAAID,EAAOC,CAAO,CACzC,CACD,CACH,CAgCA,kBAAyB,CAClB,KAAA,oBAAsB,OAC7B,CAKA,kBAAmB,CACb,KAAK,WAAa,QACjB,KAAA,SAAS,QAASA,GAA4B,CACjD,KAAK,oBAAoBA,CAAO,CAAA,CACjC,CACH,CAMA,oBAAoBE,EAA8B,CAEhD,MAAMC,EAAgBD,EAAa,oBAAsB,KAAOA,EAAa,kBAAkB,aAAe,EAE9GA,EAAa,MAAM,YAAY,6BAA8B,GAAGC,CAAa,IAAI,CACnF,CAOA,oBAAqB,CACnB,KAAK,iBAAiB,CACxB,CAOA,MAAM,cAAc,EAAe,CACjC,EAAE,eAAe,EACX,MAAAJ,EAAS,EAAE,cAA8B,cAC/C,GAAI,CAACA,EAAO,OACZ,MAAMC,EAAU,KAAK,gBAAgB,IAAID,CAAK,EACzCC,IACDI,EAASL,EAAOM,CAAM,GACxB,MAAMC,EAAQ,GAAG,EACjBC,EAAYR,EAAOM,CAAM,IAEzB,MAAMC,EAAQ,GAAG,EACjBE,EAAST,EAAOM,CAAM,EACtB,MAAMC,EAAQ,GAAG,EACjB,KAAK,oBAAoBN,CAAO,GAEpC,CACF,EA/GES,EAAA,CADCC,EAAW,+BAA+B,CAAA,EAHhCb,EAIX,UAAA,UAAA,CAAA,EAGAY,EAAA,CADCC,EAAW,8BAA8B,CAAA,EAN/Bb,EAOX,UAAA,SAAA,CAAA,EAGAY,EAAA,CADCC,EAAW,gCAAgC,CAAA,EATjCb,EAUX,UAAA,WAAA,CAAA,EAgFAY,EAAA,CAFCE,EAAQ,SAAU,QAAQ,EAC1BC,EAAS,GAAG,CAAA,EAzFFf,EA0FX,UAAA,qBAAA,CAAA,EASMY,EAAA,CADLE,EAAQ,UAAW,OAAO,CAAA,EAlGhBd,EAmGL,UAAA,gBAAA,CAAA,EAnGKA,EAANY,EAAA,CADNI,EAAgBC,CAAa,CAAA,EACjBjB,CAAA,EAqHb,eAAe,OAAO,uBAAwBA,CAAgB"}