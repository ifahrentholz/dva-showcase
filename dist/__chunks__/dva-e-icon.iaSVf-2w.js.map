{"version":3,"mappings":"qPAAO,MAAMA,EAAa,kOCUpBC,2tpCAEC,MAAMC,UAAgBC,CAAU,CACrC,aAAc,CACN,OACJ,cAAe,CACb,OAAQ,EACV,EACA,aAAc,GACf,CACH,CAEA,mBAAoB,CACd,KAAK,cAAgB,QACvB,MAAM,kBAAkB,EAExBC,EAAmB,UAAU,KAAM,IAAM,MAAM,kBAAmB,EAEtE,CAEA,IAAI,aAAsB,CACjB,YAAK,aAAa,SAAS,GAAK,MACzC,CAEA,IAAI,QAAiB,CACZ,YAAK,aAAa,SAAS,GAAK,EACzC,CAEA,IAAI,OAAOC,EAAmB,CACvB,kBAAa,UAAWA,CAAS,CACxC,CAEA,IAAI,YAAsB,CACxB,OAAO,KAAK,aAAa,aAAa,GAAK,KAAK,aAAa,aAAa,IAAM,OAClF,CAEA,sBAA6B,CACtB,KAAK,MAAM,QACd,KAAK,SAAS,CAElB,CAEA,MAAM,aAAaC,EAA+B,CAChD,MAAMC,EAAMN,EAAQ,GAAGD,CAAU,IAAIM,CAAI,MAAM,EAGxC,OADY,MADIC,IAAQ,OAAYA,EAAMN,EAAQ,GAAGD,CAAU,YAAY,IAGpF,CAEA,MAAM,UAAW,CACT,MAAAQ,EAAS,MAAM,KAAK,aAAa,KAAK,MAAM,EAC/C,KAAaC,GACLA,CACR,EACA,MAAeC,GAAA,CACN,aAAK,kDAAkDA,CAAK,EAAE,EACtE,KAAK,OAAO,EACb,EAEH,KAAK,aAAaF,CAAM,EACpB,KAAK,YACP,KAAK,eAAe,EAEtB,KAAK,SAAS,CAAE,OAAQ,EAAM,GAC9B,KAAK,cAAc,IAAI,YAAYG,CAAY,CAAC,CAClD,CAEA,WAAW,oBAAqB,CACvB,OAAC,cAAe,SAAS,CAClC,CAEA,aAAaH,EAAa,CAClB,MAAAI,EAAa,SAAS,cAAc,MAAM,EAChDA,EAAW,UAAY,UAAUC,CAAkB,WAAWL,CAAM,GAC9D,MAAAM,EAAUC,EAAKH,EAAY,KAAK,EAClCE,IAAY,MACNA,EAAA,aAAa,QAAS,iBAAiB,EAE5C,eAAY,YAAYF,EAAW,SAC1C,CAGA,yBAAyBN,EAAcU,EAAeC,EAAe,CAC/DD,IAAaC,GACb,KAAK,MAAM,SAAW,IAAM,KAAK,SAAS,CAChD,CAEA,gBAAiB,CACT,MAAAH,EAAUC,EAAK,KAAM,KAAK,EAC5BD,IAAY,MACNA,EAAA,aAAa,QAAS,mCAAmC,CAErE,CACF,CAEA,eAAe,OAAO,aAAcZ,CAAO","names":["ICONS_PATH","modules","DvaIcon","Component","LazyConnectService","newIconId","name","key","symbol","icon","error","LOADED_EVENT","svgTempBox","dvaEIconShadowScss","svgRoot","find","oldValue","newValue"],"sources":["../../src/constants.ts","../../src/components/icon/dva-e-icon.ts"],"sourcesContent":["export const ICONS_PATH = \"/public/icons\";\n","import { Component } from \"@kluntje/core\";\nimport { find } from \"@kluntje/js-utils/lib/dom-helpers\";\n\nimport { ICONS_PATH } from \"../../constants.ts\";\nimport LazyConnectService from \"../../services/LazyConnectService.ts\";\nimport { LOADED_EVENT } from \"../../constants/eventTypes.ts\";\nimport dvaEIconShadowScss from \"./dva-e-icon.shadow.scss?inline\";\n\n// Vite runs on build time and finds all svg files in icons directory\n// Since import.meta.glob only accepts literals ICON_PATH cant be used\nconst modules = import.meta.glob(\"/public/icons/*.svg\", { as: \"raw\" });\n\nexport class DvaIcon extends Component {\n  constructor() {\n    super({\n      initialStates: {\n        loaded: false,\n      },\n      useShadowDOM: true,\n    });\n  }\n\n  connectedCallback() {\n    if (this.loadingAttr === \"eager\") {\n      super.connectedCallback();\n    } else {\n      LazyConnectService.subscribe(this, () => super.connectedCallback());\n    }\n  }\n\n  get loadingAttr(): string {\n    return this.getAttribute(\"loading\") || \"lazy\";\n  }\n\n  get iconId(): string {\n    return this.getAttribute(\"icon-id\") || \"\";\n  }\n\n  set iconId(newIconId: string) {\n    this.setAttribute(\"icon-id\", newIconId);\n  }\n\n  get halfFilled(): boolean {\n    return this.hasAttribute(\"half-filled\") && this.getAttribute(\"half-filled\") !== \"false\";\n  }\n\n  afterComponentRender(): void {\n    if (!this.state.loaded) {\n      this.loadIcon();\n    }\n  }\n\n  async getSvgString(name: string): Promise<string> {\n    const key = modules[`${ICONS_PATH}/${name}.svg`];\n    const iconMarkupFunc = key !== undefined ? key : modules[`${ICONS_PATH}/cross.svg`];\n    const iconMarkup = await iconMarkupFunc();\n    return iconMarkup;\n  }\n\n  async loadIcon() {\n    const symbol = await this.getSvgString(this.iconId)\n      .then(icon => {\n        return icon;\n      })\n      .catch(error => {\n        console.warn(`An error occurred while loading the component: ${error}`);\n        this.remove();\n      });\n\n    this.appendSymbol(symbol);\n    if (this.halfFilled) {\n      this.makeHalfFilled();\n    }\n    this.setState({ loaded: true });\n    this.dispatchEvent(new CustomEvent(LOADED_EVENT));\n  }\n\n  static get observedAttributes() {\n    return [\"half-filled\", \"icon-id\"];\n  }\n\n  appendSymbol(symbol: any) {\n    const svgTempBox = document.createElement(\"span\");\n    svgTempBox.innerHTML = `<style>${dvaEIconShadowScss}</style>${symbol}`;\n    const svgRoot = find(svgTempBox, \"svg\");\n    if (svgRoot !== null) {\n      svgRoot.setAttribute(\"class\", \"dva-e-icon__svg\");\n    }\n    this.getUiRoot().innerHTML = svgTempBox.innerHTML;\n  }\n\n  // @ts-ignore\n  attributeChangedCallback(name: string, oldValue: any, newValue: any) {\n    if (oldValue === newValue) return;\n    if (this.state.loaded === true) this.loadIcon();\n  }\n\n  makeHalfFilled() {\n    const svgRoot = find(this, \"svg\");\n    if (svgRoot !== null) {\n      svgRoot.setAttribute(\"style\", \"fill: url(#half_filled)!important\");\n    }\n  }\n}\n\ncustomElements.define(\"dva-e-icon\", DvaIcon);\n"],"file":"__chunks__/dva-e-icon.iaSVf-2w.js"}