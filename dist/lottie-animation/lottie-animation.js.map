{"version":3,"mappings":"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","names":["DvagLottieSlider","DvagBasicSlider","ViewportObserver","newState","toggleClass","VISIBLE","slide","removeClass","ACTIVE","addClass","LazyConnectService","dir","prev","curr","progress","waitForInitialization","lottie","__vitePreload","n","hasClass","LOADED","offsetLeft","waitForScrollEnd","e","__decorateClass","uiElement","uiEvent","IN_VIEWPORT_EVENT","DvagProgressBar","Component","percentage","duration","renderModifiers","cssClasses","cssClass","lottieAnimationTemplate","args","html","renderIcon","getBlockModifiers","block","lottieAnimation","headerSubheadline","headerHeadline","animationPath","slides","_a","_b","_c","cta","ctaUrl","ctaLabel","cleanUpBlock","render"],"sources":["../../src/components/dvag-m-lottie-slider/dvag-m-lottie-slider.ts","../../src/components/dvag-e-progress-bar/dvag-e-progress-bar.ts","../../src/blocks/lottie-animation/lottie-animation.ts"],"sourcesContent":["import { DvagBasicSlider } from \"Components/dvag-m-basic-slider/dvag-m-basic-slider\";\nimport { addClass, hasClass, removeClass, toggleClass } from \"@kluntje/js-utils/lib/dom-helpers\";\nimport { LottiePlayer, AnimationItem } from \"lottie-web\";\nimport { ACTIVE, LOADED, VISIBLE } from \"Constants/cssClasses\";\nimport { uiElement, uiEvent } from \"@kluntje/core\";\nimport { DvagProgressBar } from \"Components/dvag-e-progress-bar/dvag-e-progress-bar\";\nimport { LazyConnectService, ViewportObserver } from \"@kluntje/services\";\nimport { IN_VIEWPORT_EVENT } from \"Constants/eventTypes\";\nimport { waitForInitialization } from \"Helpers/componentHelper/waitForInitialization\";\nimport { waitForScrollEnd } from \"Helpers/domHelper/waitForScrollEnd\";\n\nexport class DvagLottieSlider extends DvagBasicSlider {\n  viewportObserver = ViewportObserver.getInstance();\n\n  private animationLoaded = false;\n\n  animation: AnimationItem;\n  lottie: LottiePlayer;\n\n  @uiElement(\".dvag-m-lottie-slider__animation-box\")\n  animationBox: HTMLDivElement;\n\n  @uiElement(\".dvag-e-progress-bar\")\n  progressBar: DvagProgressBar;\n\n  // needed because currently lottie-web doesn't support playSegments with Markers\n  get segmentLength(): number {\n    return parseInt(this.getAttribute(\"segment-length\") || \"120\", 10);\n  }\n\n  get animationPath(): string {\n    return this.getAttribute(\"animation-path\") || \"\";\n  }\n\n  set lastSlideVisible(newState: boolean) {\n    toggleClass(this.nextBtn, VISIBLE, !newState);\n    this.updateSliderActive();\n    if (this.activeSlideIdx === this.slides.length - 1) {\n      this.stopAutoPlay();\n    }\n  }\n\n  updateActiveSlide(): void {\n    if (this.activeSlideIdx === this.slides.findIndex(slide => this.activeSlideMap.get(slide) === true)) return;\n    this.activeSlideIdx = this.slides.findIndex(slide => this.activeSlideMap.get(slide) === true);\n    this.dispatchSlideChangedEvent();\n    removeClass(this.slides, ACTIVE);\n    addClass(this.slides[this.activeSlideIdx], ACTIVE);\n    this.lastSlideVisible = this.activeSlideIdx === this.slides.length - 1;\n    if (this.animationLoaded && this.animation) {\n      this.playSegment(this.activeSlideIdx, this.activeSlideIdx + 1);\n    }\n    this.updateProgressBar();\n  }\n\n  afterComponentRender() {\n    this.viewportObserver.observe(this);\n    this.slidesContainer.scrollLeft = 0;\n    LazyConnectService.subscribe(this, () => {\n      this.initEditMode();\n      this.initActiveSlideObserver();\n      this.initControls();\n    });\n\n    addClass(this.slides[this.activeSlideIdx], ACTIVE);\n    if (this.animationLoaded && this.animation) {\n      this.playSegment(this.activeSlideIdx, this.activeSlideIdx + 1);\n    }\n    this.updateProgressBar();\n  }\n\n  moveOneSlide(dir: number): void {\n    this.goToSlide(this.activeSlideIdx + dir);\n  }\n\n  handleNextBtnClick() {\n    this.lastInteractionType = \"click\";\n    this.moveOneSlide(1);\n    this.stopAutoPlay();\n  }\n\n  handlePrevBtnClick() {\n    this.lastInteractionType = \"click\";\n    this.moveOneSlide(-1);\n    this.stopAutoPlay();\n  }\n\n  playSegment(prev: number, curr: number) {\n    this.animation.playSegments([prev * this.segmentLength + 1, curr * this.segmentLength + 1], true);\n  }\n\n  async updateProgressBar() {\n    const progress = (100 / this.slides.length) * (this.activeSlideIdx + 1);\n    await waitForInitialization(this.progressBar);\n    this.progressBar.updateProgressIndicator(progress, this.segmentLength / 60);\n  }\n\n  async loadAnimation(): Promise<void> {\n    if (this.animationPath === \"\" || this.animationLoaded) return;\n    this.animationLoaded = true;\n    this.lottie = await this.loadLottiePlayer();\n    this.animation = this.lottie.loadAnimation({\n      container: this.animationBox,\n      autoplay: true,\n      loop: false,\n      renderer: \"svg\",\n      path: this.animationPath,\n    });\n  }\n\n  async loadLottiePlayer(): Promise<LottiePlayer> {\n    const { default: lottie } = await import(\"lottie-web\");\n    return lottie;\n  }\n\n  @uiEvent(\"this\", IN_VIEWPORT_EVENT)\n  async startAutoplay() {\n    if (hasClass(this, LOADED)) return;\n\n    await this.loadAnimation();\n    if (this.autoplay) {\n      this.lastInteractionType = \"autoplay\";\n      this.startSliderAutoPlayInterval();\n    }\n    addClass(this, LOADED);\n    // necessary to play only first segment\n    setTimeout(() => this.animation.goToAndStop(this.segmentLength, true), (this.segmentLength / 60) * 1000);\n  }\n\n  /**\n   * moves slider to position\n   * @override\n   */\n  async moveSliderTo(offsetLeft: number) {\n    this.slidesContainer.scrollTo({\n      left: offsetLeft,\n      behavior: \"smooth\",\n    });\n    await waitForScrollEnd(this.slidesContainer);\n  }\n\n  startSliderAutoPlayInterval(): void {\n    if (this.autoplayInterval === null) {\n      this.autoplayInterval = setInterval(() => {\n        this.moveOneSlide(1);\n      }, (this.segmentLength / 60) * 1000 + this.autoplayDelay);\n    }\n  }\n\n  @uiEvent(\"slidesContainer\", \"wheel\")\n  detectHorizontalScrolling(e: WheelEvent) {\n    if (e.deltaX !== 0) {\n      this.lastInteractionType = \"swipe\";\n      this.stopAutoPlay();\n    }\n  }\n}\n\ncustomElements.define(\"dvag-m-lottie-slider\", DvagLottieSlider);\n","import { Component, uiElement } from \"@kluntje/core\";\n\nexport class DvagProgressBar extends Component {\n  @uiElement(\".dvag-e-progress-bar__progress-indicator\")\n  progressIndicator: HTMLDivElement;\n\n  get startValue(): number {\n    return parseInt(this.getAttribute(\"start-value\") || \"0\", 10);\n  }\n\n  afterComponentRender() {\n    this.updateProgressIndicator(this.startValue, 2);\n  }\n\n  public updateProgressIndicator(percentage: number, duration: number): void {\n    this.progressIndicator.style.transitionDuration = `${duration}s`;\n    this.progressIndicator.style.width = `${percentage}%`;\n  }\n}\n\ncustomElements.define(\"dvag-e-progress-bar\", DvagProgressBar);\n","import { renderIcon } from \"Components/icon/dva-e-icon.template\";\nimport { cleanUpBlock } from \"Utils/cleanUpBlock\";\nimport { html, render } from \"lit\";\nimport \"./lottie-animation.scss\";\nimport \"Components/dvag-m-lottie-slider/dvag-m-lottie-slider\";\nimport \"Components/dvag-e-progress-bar/dvag-e-progress-bar\";\n\ntype modifier = \"background--grey\" | \"skew--top\" | \"skew--bottom\" | \"margin-bottom--none\";\n\ninterface Slide {\n  subheadline: string;\n  headline: string;\n  text: string;\n}\n\ninterface LottieAnimationTemplateArgs {\n  cssClasses: modifier[];\n  headerSubheadline: string;\n  headerHeadline: string;\n  animationPath: string;\n  slides: Slide[];\n  ctaUrl?: string;\n  ctaLabel?: string;\n}\n\nconst renderModifiers = (cssClasses: string[]) => {\n  return cssClasses\n    .map(cssClass => {\n      if (cssClass === \"margin-bottom-none\") return `dvag-h-margin-bottom--none`;\n      if (cssClass === \"background-grey\") return `dvag-h-background--grey`;\n      if (cssClass === \"skew-top\") return `dvag-h-skew--top`;\n      if (cssClass === \"skew-bottom\") return `dvag-h-skew--bottom`;\n      return `dvag-h-${cssClass}`;\n    })\n    .join(\" \");\n};\n\nconst lottieAnimationTemplate = (args: LottieAnimationTemplateArgs) => {\n  return html` <div class=\"c33-animation ${renderModifiers(args.cssClasses)}\">\n    <div id=\"lottie-animation\">\n      <div class=\"dvag-m-c33-lottie-animation dvag-m-skew-component\">\n        <div class=\"dva-h-skew--in\"></div>\n        <div class=\"dvag-m-skewed-box__content\">\n          <div class=\"dvag-m-c33-lottie-animation__grid-wrapper\">\n            <div class=\"dvag-m-section-header\">\n              <h3 class=\"dvag-m-section-header__subheadline\">${args.headerSubheadline}</h3>\n              <h2 class=\"dvag-m-section-header__headline\">${args.headerHeadline}</h2>\n            </div>\n          </div>\n          <dvag-m-lottie-slider\n            class=\"dvag-m-lottie-slider\"\n            title=\"${args.headerHeadline}\"\n            autoplay=\"true\"\n            animation-path=\"/dist/lottie/${args.animationPath.trim()}\"\n            segment-length=\"120\"\n          >\n            <div class=\"dvag-m-lottie-slider__grid-wrapper\">\n              <div class=\"dvag-m-lottie-slider__animation-box\">\n                <!-- lottie animation is rendered dynamically here -->\n              </div>\n            </div>\n            <dvag-e-progress-bar class=\"dvag-e-progress-bar\" start-value=\"0\">\n              <div class=\"dvag-e-progress-bar__progress-indicator\"></div>\n            </dvag-e-progress-bar>\n            <div class=\"dvag-m-basic-slider dvag-m-teaser-slider\">\n              <div class=\"dvag-m-basic-slider__slides\">\n                ${args.slides.map(slide => {\n                  return html`\n                    <div class=\"dvag-m-basic-slider__slide\">\n                      <div class=\"dvag-m-lottie-slider-slide\">\n                        <h4 class=\"dvag-m-lottie-slider-slide__subheadline\">${slide.subheadline}</h4>\n                        <h3 class=\"dvag-m-lottie-slider-slide__headline\">${slide.headline}</h3>\n                        <div class=\"dvag-m-lottie-slider-slide__text dvag-e-richtext\">${slide.text}</div>\n                      </div>\n                    </div>\n                  `;\n                })}\n              </div>\n              <div class=\"dvag-m-basic-slider__controls\">\n                <button\n                  class=\"dva-e-button dva-e-button--primary dva-e-button--rebrush dvag-m-basic-slider__nav-button dvag-m-basic-slider__nav-button--prev\"\n                >\n                  <div class=\"dva-e-button__background\"></div>\n                  ${renderIcon(\"dva-icon-chevron-left\")}\n                </button>\n                <button\n                  class=\"dva-e-button dva-e-button--primary dva-e-button--rebrush dvag-m-basic-slider__nav-button dvag-m-basic-slider__nav-button--next\"\n                >\n                  <div class=\"dva-e-button__background\"></div>\n                  ${renderIcon(\"dva-icon-chevron-right\")}\n                </button>\n              </div>\n            </div>\n          </dvag-m-lottie-slider>\n          <!-- cta is optional -->\n          <div class=\"dvag-m-c33-lottie-animation__grid-wrapper\">\n            <div class=\"dvag-m-c33-lottie-animation__cta-wrapper\">\n              <a class=\"dva-e-button dva-e-button--rebrush\" href=\"${args.ctaUrl}\">\n                <div class=\"dva-e-button__background\"></div>\n                <span class=\"dva-e-button__label\">${args.ctaLabel}</span>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div class=\"dva-h-skew--out\"></div>\n      </div>\n    </div>\n  </div>`;\n};\n\nconst getBlockModifiers = (block: HTMLElement) => {\n  return [...block.classList] as modifier[];\n};\n\nexport default function (block: HTMLElement) {\n  const cssClasses = getBlockModifiers(block);\n  const headerSubheadline = block.children[0].textContent || \"\";\n  const headerHeadline = block.children[1].textContent || \"\";\n  const animationPath = block.children[2].textContent || \"\";\n  const slides = [...block.children].slice(4).map(slide => {\n    return {\n      subheadline: slide.querySelector(\"h4\")?.textContent || \"\",\n      headline: slide.querySelector(\"h3\")?.textContent || \"\",\n      text: slide.querySelector(\"p\")?.textContent || \"\",\n    };\n  });\n  const cta = block.children[3].querySelector(\"a\");\n  const ctaUrl = cta?.getAttribute(\"href\") || \"\";\n  const ctaLabel = cta?.textContent || \"\";\n\n  cleanUpBlock(block);\n\n  render(\n    lottieAnimationTemplate({ cssClasses, headerSubheadline, headerHeadline, animationPath, slides, ctaUrl, ctaLabel }),\n    block,\n  );\n}\n"],"file":"lottie-animation/lottie-animation.js"}