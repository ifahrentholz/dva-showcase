{"version":3,"file":"cta-block.js","sources":["../../src/blocks/cta-block/cta-block.ts"],"sourcesContent":["import { cleanUpBlock } from \"Utils/cleanUpBlock.ts\";\nimport { html, nothing, render } from \"lit\";\nimport { renderIcon } from \"Components/icon/dva-e-icon.template.ts\";\nimport { renderLazyImage } from \"Components/dva-e-lazy-image/dva-e-lazy-image.template.ts\";\n\nimport { IconName } from \"../../icons.types.ts\";\n\nimport \"./cta-block.scss\";\n\ninterface BannerArgs {\n  buttonLabel: string;\n  color: string;\n  iconName: IconName;\n  image?: HTMLImageElement;\n  advisorName: string;\n  text: string;\n  advisorTitle: string;\n  options: string;\n}\n\nconst renderAdvisorImage = (image?: HTMLImageElement) => {\n  if (!image?.src) return nothing;\n  return html` <div class=\"dvag-m-c19-cta-block__image-wrapper dvag-m-c19-cta-block__image-wrapper--vb-image\">\n    ${renderLazyImage({\n      aspectRatio: \"1:1\",\n      cssClasses: \"dvag-m-c19-cta-block__vb-image\",\n      wrapper: \"circle\",\n      src: image ? image.src : \"\",\n      alt: image ? image.alt : \"\",\n      sizes: \"208px\",\n    })}\n  </div>`;\n};\nconst template = ({ buttonLabel, color, iconName, image, text, advisorName, advisorTitle, options }: BannerArgs) => {\n  return html` <div\n    class=\"c19-ctablock teaser dvag-h-typography--light\n${options}\n\"\n  >\n    <div class=\"dvag-m-c19-cta-block\" id=\"c19-cta-block\" style=\"--background-color:${color}\">\n      <div class=\"\">\n        <div class=\"dvag-m-c19-cta-block__content-wrapper\">\n          <div class=\"dvag-m-c19-cta-block__inner-content-wrapper\">\n            ${renderAdvisorImage(image)}\n            <div class=\"dvag-m-c19-cta-block__text-wrapper\">\n              <div class=\"dvag-m-c19-cta-block__text\">\n                <h2>${text}</h2>\n              </div>\n              <p class=\"dvag-m-c19-cta-block__vb-info\">\n                ${advisorTitle}\n                <span class=\"dvag-m-c19-cta-block__vb-name\">${advisorName}</span>\n              </p>\n              <div class=\"dvag-m-c19-cta-block__button-wrapper\">\n                <dvag-e-c26-vb-contact-overlay-toggle\n                  id=\"contact_c19-cta-block\"\n                  class=\"dvag-e-c26-vb-contact-overlay-toggle dva-e-button dva-e-button--rebrush dva-e-button--small\"\n                  deeplinking-target=\"kontakt\"\n                  tabindex=\"0\"\n                >\n                  <div class=\"dva-e-button__background\"></div>\n                  ${renderIcon(iconName, \"dva-e-button__icon\")}\n                  <span class=\"dva-e-button__label\">${buttonLabel}</span>\n                </dvag-e-c26-vb-contact-overlay-toggle>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>`;\n};\n\nconst addPrefix = (value: string) => {\n  return `dvag-h-${value}`;\n};\n\nconst getBlockOptions = (block: HTMLElement) => {\n  return [...block.classList]\n    .filter(classValue => ![\"block\", \"teaser\"].includes(classValue))\n    .map(classValue =>\n      classValue.includes(\"margin\") || classValue.includes(\"typography\") ? addPrefix(classValue) : classValue,\n    )\n    .join(\" \");\n};\n\nexport default function (block: HTMLElement) {\n  const bannerArgs: BannerArgs = {\n    image: block.querySelector(\"img\") || undefined, // find a better solution\n    advisorName: block.children[1].textContent?.trim() || \"\",\n    text: block.children[2].textContent?.trim() || \"\",\n    buttonLabel: block.children[4].textContent?.trim() || \"\",\n    iconName: (block.children[3].textContent?.trim() as IconName) || \"dva-icon-speechbubble-24px\",\n    color: block.children[5].textContent?.trim() || \"\",\n    advisorTitle: block.children[6].textContent?.trim() || \"\",\n    options: getBlockOptions(block),\n  };\n\n  cleanUpBlock(block);\n  render(template(bannerArgs), block);\n}\n"],"names":["renderAdvisorImage","image","html","renderLazyImage","nothing","template","buttonLabel","color","iconName","text","advisorName","advisorTitle","options","renderIcon","addPrefix","value","getBlockOptions","block","classValue","ctaBlock","bannerArgs","_a","_b","_c","_d","_e","_f","cleanUpBlock","render"],"mappings":"uWAoBA,MAAMA,EAAsBC,GACrBA,GAAA,MAAAA,EAAO,IACLC,mGACHC,EAAgB,CAChB,YAAa,MACb,WAAY,iCACZ,QAAS,SACT,IAAKF,EAAQA,EAAM,IAAM,GACzB,IAAKA,EAAQA,EAAM,IAAM,GACzB,MAAO,OAAA,CACR,CAAC,SAToBG,EAYpBC,EAAW,CAAC,CAAE,YAAAC,EAAa,MAAAC,EAAO,SAAAC,EAAU,MAAAP,EAAO,KAAAQ,EAAM,YAAAC,EAAa,aAAAC,EAAc,QAAAC,KACjFV,6DAEPU,CAAO,oFAG4EL,CAAK,sHAI5EP,EAAmBC,CAAK,CAAC,+FAGjBQ,CAAI,uDAGRE,CAAY,gDACgCD,CAAW,2TAUrDG,EAAWL,EAAU,oBAAoB,CAAC,sCACRF,CAAW,2FAW3DQ,EAAaC,GACV,UAAUA,CAAK,GAGlBC,EAAmBC,GAChB,CAAC,GAAGA,EAAM,SAAS,EACvB,OAAOC,GAAc,CAAC,CAAC,QAAS,QAAQ,EAAE,SAASA,CAAU,CAAC,EAC9D,IAAIA,GACHA,EAAW,SAAS,QAAQ,GAAKA,EAAW,SAAS,YAAY,EAAIJ,EAAUI,CAAU,EAAIA,CAAA,EAE9F,KAAK,GAAG,EAGb,SAAAC,EAAyBF,EAAoB,iBAC3C,MAAMG,EAAyB,CAC7B,MAAOH,EAAM,cAAc,KAAK,GAAK,OACrC,cAAaI,EAAAJ,EAAM,SAAS,CAAC,EAAE,cAAlB,YAAAI,EAA+B,SAAU,GACtD,OAAMC,EAAAL,EAAM,SAAS,CAAC,EAAE,cAAlB,YAAAK,EAA+B,SAAU,GAC/C,cAAaC,EAAAN,EAAM,SAAS,CAAC,EAAE,cAAlB,YAAAM,EAA+B,SAAU,GACtD,WAAWC,EAAAP,EAAM,SAAS,CAAC,EAAE,cAAlB,YAAAO,EAA+B,SAAuB,6BACjE,QAAOC,EAAAR,EAAM,SAAS,CAAC,EAAE,cAAlB,YAAAQ,EAA+B,SAAU,GAChD,eAAcC,EAAAT,EAAM,SAAS,CAAC,EAAE,cAAlB,YAAAS,EAA+B,SAAU,GACvD,QAASV,EAAgBC,CAAK,CAAA,EAGhCU,EAAaV,CAAK,EACXW,EAAAvB,EAASe,CAAU,EAAGH,CAAK,CACpC"}